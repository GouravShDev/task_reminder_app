// Mocks generated by Mockito 5.0.14 from annotations
// in todo_list/test/features/todo/presentation/bloc/todo_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_list/core/error/failures.dart' as _i6;
import 'package:todo_list/core/services/notification_service.dart' as _i11;
import 'package:todo_list/core/usecases/usecase.dart' as _i8;
import 'package:todo_list/features/todo/domain/entities/todo.dart' as _i7;
import 'package:todo_list/features/todo/domain/repositories/todos_repository.dart'
    as _i2;
import 'package:todo_list/features/todo/domain/usecases/add_todo.dart' as _i9;
import 'package:todo_list/features/todo/domain/usecases/get_todo_list.dart'
    as _i4;
import 'package:todo_list/features/todo/domain/usecases/toggle_todo_status.dart'
    as _i10;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeTodosRepository_0 extends _i1.Fake implements _i2.TodosRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [GetTodosList].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTodosList extends _i1.Mock implements _i4.GetTodosList {
  MockGetTodosList() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodosRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTodosRepository_0()) as _i2.TodosRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.ToDo>>> call(
          _i8.NoParams? noParams) =>
      (super.noSuchMethod(Invocation.method(#call, [noParams]),
          returnValue: Future<_i3.Either<_i6.Failure, List<_i7.ToDo>>>.value(
              _FakeEither_1<_i6.Failure, List<_i7.ToDo>>())) as _i5
          .Future<_i3.Either<_i6.Failure, List<_i7.ToDo>>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AddTodoToDb].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTodoToDb extends _i1.Mock implements _i9.AddTodoToDb {
  MockAddTodoToDb() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodosRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTodosRepository_0()) as _i2.TodosRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ToDo>> call(_i8.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.ToDo>>.value(
                  _FakeEither_1<_i6.Failure, _i7.ToDo>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.ToDo>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [ToggleTodoStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockToggleTodoStatus extends _i1.Mock implements _i10.ToggleTodoStatus {
  MockToggleTodoStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TodosRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTodosRepository_0()) as _i2.TodosRepository);
  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.ToDo>> call(_i8.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i3.Either<_i6.Failure, _i7.ToDo>>.value(
                  _FakeEither_1<_i6.Failure, _i7.ToDo>()))
          as _i5.Future<_i3.Either<_i6.Failure, _i7.ToDo>>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i11.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> showNotication(
          {int? id, String? title, String? message, String? payload}) =>
      (super.noSuchMethod(
          Invocation.method(#showNotication, [],
              {#id: id, #title: title, #message: message, #payload: payload}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> scheduledNotification(
          {int? id,
          String? title,
          String? message,
          String? payload,
          DateTime? scheduledDate}) =>
      (super.noSuchMethod(
          Invocation.method(#scheduledNotification, [], {
            #id: id,
            #title: title,
            #message: message,
            #payload: payload,
            #scheduledDate: scheduledDate
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> cancelNotification(int? id) =>
      (super.noSuchMethod(Invocation.method(#cancelNotification, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  String toString() => super.toString();
}
